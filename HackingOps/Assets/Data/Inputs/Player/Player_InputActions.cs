//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Data/Inputs/Player/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class Player_InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public Player_InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""ThirdPersonCharacter_ActionMap"",
            ""id"": ""76bb3a25-3690-4166-9e14-efcc3592a1db"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""13446cbb-5fce-4f61-ac96-7e5ce6033f62"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""6853d0a2-12f2-4ba1-b78d-a9f829952170"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Value"",
                    ""id"": ""a2900d22-7b28-4e57-898b-a7fd4ecf8255"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""2541a17b-819c-42a0-a3b2-94e6aee7deda"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""f454e865-8998-460f-bb41-f2afb643de8d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2235cdbf-aacd-4f72-bc17-88bd8ce85f47"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d2f54637-e3e6-4461-80d0-91f68a70f0af"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""65d3c1d7-c6c1-400a-858b-ee853a938ee9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2126875e-7044-4efe-89a0-491dcef3fd86"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""66a97e8c-58fc-4943-b796-025163f4140c"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""01645eb4-4100-4a08-a4dc-b8be493f2c2e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0eea5429-f0d8-49b2-b91b-0249c381548f"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c6a9daf-291c-45c3-8692-690d396bf8b7"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e500e86c-a890-4a27-b5f4-5b055c2d6824"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ThirdPersonCharacter_ActionMap
        m_ThirdPersonCharacter_ActionMap = asset.FindActionMap("ThirdPersonCharacter_ActionMap", throwIfNotFound: true);
        m_ThirdPersonCharacter_ActionMap_Move = m_ThirdPersonCharacter_ActionMap.FindAction("Move", throwIfNotFound: true);
        m_ThirdPersonCharacter_ActionMap_Jump = m_ThirdPersonCharacter_ActionMap.FindAction("Jump", throwIfNotFound: true);
        m_ThirdPersonCharacter_ActionMap_Run = m_ThirdPersonCharacter_ActionMap.FindAction("Run", throwIfNotFound: true);
        m_ThirdPersonCharacter_ActionMap_Crouch = m_ThirdPersonCharacter_ActionMap.FindAction("Crouch", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ThirdPersonCharacter_ActionMap
    private readonly InputActionMap m_ThirdPersonCharacter_ActionMap;
    private List<IThirdPersonCharacter_ActionMapActions> m_ThirdPersonCharacter_ActionMapActionsCallbackInterfaces = new List<IThirdPersonCharacter_ActionMapActions>();
    private readonly InputAction m_ThirdPersonCharacter_ActionMap_Move;
    private readonly InputAction m_ThirdPersonCharacter_ActionMap_Jump;
    private readonly InputAction m_ThirdPersonCharacter_ActionMap_Run;
    private readonly InputAction m_ThirdPersonCharacter_ActionMap_Crouch;
    public struct ThirdPersonCharacter_ActionMapActions
    {
        private Player_InputActions m_Wrapper;
        public ThirdPersonCharacter_ActionMapActions(Player_InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_ThirdPersonCharacter_ActionMap_Move;
        public InputAction @Jump => m_Wrapper.m_ThirdPersonCharacter_ActionMap_Jump;
        public InputAction @Run => m_Wrapper.m_ThirdPersonCharacter_ActionMap_Run;
        public InputAction @Crouch => m_Wrapper.m_ThirdPersonCharacter_ActionMap_Crouch;
        public InputActionMap Get() { return m_Wrapper.m_ThirdPersonCharacter_ActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ThirdPersonCharacter_ActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IThirdPersonCharacter_ActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_ThirdPersonCharacter_ActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ThirdPersonCharacter_ActionMapActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
            @Crouch.started += instance.OnCrouch;
            @Crouch.performed += instance.OnCrouch;
            @Crouch.canceled += instance.OnCrouch;
        }

        private void UnregisterCallbacks(IThirdPersonCharacter_ActionMapActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
            @Crouch.started -= instance.OnCrouch;
            @Crouch.performed -= instance.OnCrouch;
            @Crouch.canceled -= instance.OnCrouch;
        }

        public void RemoveCallbacks(IThirdPersonCharacter_ActionMapActions instance)
        {
            if (m_Wrapper.m_ThirdPersonCharacter_ActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IThirdPersonCharacter_ActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_ThirdPersonCharacter_ActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ThirdPersonCharacter_ActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ThirdPersonCharacter_ActionMapActions @ThirdPersonCharacter_ActionMap => new ThirdPersonCharacter_ActionMapActions(this);
    public interface IThirdPersonCharacter_ActionMapActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
    }
}
